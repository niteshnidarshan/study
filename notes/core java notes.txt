Software : Collection of programs meant for developing some type of operations.
	1.System software
	2.Application software
	3.Internet software

System software : A system software is a program which is running in 
		the background and provides effective services to 
		the programe which is written by the programmer.

Application software : The basic aim of application software is to develope the software 
		for organisations like financial, healthcare, transportation, educational etc...

Stand-alone application : A stand-alone application is one which is running in the context of local disk 
		and whose results are accessible in the same machine, but not possible to access it accross
		the globe.
		for e.g : system software and application softwares.

Distributed Application : A distributed application is one which runs in the context of browser/www,
		and whose results can be accessible across the globe.

Internet software : The aim of internet s/w is to develope distributed application. Java and .NET is used to
		develope these type of s/w.
    
    
    		Hence Java is one of internet software, developed by Sun Microsystem and released to the real industry 
    	for the development of each and every applications, but it becomes more popular in the real industry for the   
    	development of distributed applications. 

		Java is one of the programming language/technology used in the industry for development of each and    
	every applications but it becomes more popular for the development of distributed applications.
    
 
Two-tier architecture:
----------------------
			a) set of client side programs.
			b) set of server side programs.
			for e.g. : www.google.com

Tree-tier architecture:
-----------------------
			a) set of client side programs.
			b) set of server side programs.
			c) set of database s/w products.
			for e.g. : www.gmail.com

n-tier architecture :
----------------------
			a) set of client side programs.
			b) set of server side programs.
			c) set of database s/w products.
			d) set of firewall/ security programs.


Java is available in three categories:
	1. J2SE(Java to Standard Edition)
	2. J2EE(Java to Enterprise Edition)
	3. J2ME(Java to Mobile Edition)

Java features/buzzwords : 
	1. Simple(due to no pointer, garbage collector, user friendly syntax, rich API etc..)
	2. Platform independent(JVM takes same amount of memory space by data types, runs from one O/S to other O/S)
	3. Architectural neutral(runs on each and every processors)
	4. Portable(platform independent + architectural neutral)
	5. Multithreaded(simultenous/ parallel execution[flow of control is known as thread])
	6. Networked(can be developed intranet/internet application)
	7. Distributed(centralised & distributed application development)
	8. High performance(garbage collector + byte code)
	9. Highly interpreted(due to JIT)
	10. Robust(strong due to exception handling)
	11. Secured(rich security API)
	12. Dynamic('new' operator is dynaic operator, it reserves memory at run time not compile time) and Object Orientd Programming language

indiabix.com
	Byte Code : 
	-----------
		Byte code is the set of optimized instructions generated by the java compiler during the 
		compilation phase and the nature of the byte code is much powerful then pointer code of C, 
		CPP programming languages.

	JVM : 
	-----------
		JVM is a program developed by the Sun Microsystem developers and supplied to the part of 
		java s/w(JDK). And the role of JVM is reading line by line of byte code and convert into 
		native understanding form of operating system.

	Note : Byte code is one of the O/S independent and JVM is one of the O/S dependent.

	JIT :
	-----------
		Just-In-Time is a program developed by Sun Microsystem developers and supplied to the part of JVM.
		And the role of the JIT is reading the entire section of the byte code and convert into native
		understanding form of O/S.

			
	Garbage Collector :
	-------------------
		A garbage collector is a system background java program	which runs with our regular java programs 
		for collecting unused memory spaces and internally improves the performance of every java program.

	
	Data types :
	===================
		In every programming languages data types are always used for allocating sufficient amount of memory
		space for the input of the program in the main memory either by static memory allocation or dynamic
		memory allocation. Data types are classified by 3 types as :
			
		1. Fundamental/ built in/ primitive data types(developed by the language developers and 
			allows us to store single value in a variable of that type. like int, char etc..)
		2. Derrived data types(Derrived data types are those whose variable allows us to store
			multiple values of the same type. like int[], char[] etc..)
		3. User/ programming/ secondry/ custom/ reffrential defined data types(User defined data types are those 
			which are developed by the programmers by using language features and whose variables allows us to
			store multiple values either of same type or different type or both the types.
			like [struct, union, enum in C] or [class, interface, enum in java]).

	Array :
	-------
		An array is a collective name given to a group of consiqutive memory locations which are all reffered
		by similar or homogenous values.				
 
	Integer category data types: [default value is 0.]
	-----------------------------
		1. byte(1 byte)
		2. short(2 bytes)
		3. int(4 bytes)
		4. long(8 bytes)

	Float category data types: [default value is 0.0]
	-----------------------------
		1. float(4 bytes by 7 decimal places)
		2. double(8 bytes by 15 decimal places)

	Character category data types: [default value is nothing]
	--------------------------------
		1. char(2 bytes)
	
	Boolean category data type: [default value is false]
	-------------------------------
		1. boolean(true/false)

Constants in java : [using 'final' keyword]
============================================
	A constant is an identifier whose value can not be changed during execution of the programe. It can be achieved 
	by the keyword 'final' at three level as:
	
		1. At variable level(If we want never to change the value of the variable.[can not be modified] )
		2. At method level(Method can not be redefined/ overridden)
		3. At class level(The class will not participate in inheritance process[a final class can not be inheritable. like ''String'' class. ])

String :
---------------
	 A string in literal terms is a sequence of characters like the word “hello”. 
	 Hey, did you say characters, isn’t it a primitive data type in Java. Yes, so in technical terms, the basic Java String is basically an array of characters.
	 In the java programming language, string is object.

 

Immutable String :
----------------------
	Java String is an immutable object. 
	For an immutable object you cannot modify any of its attribute’s values. 
	Once you have created a java String object it cannot be modified to some other object or a different String. 
	A reference to a java String instance is mutable. There are multiple ways to make an object immutable. 
	Simple and straight forward way is to make all the attributes of that class as final. Java String has all attributes marked as final except hash field.

 

	We all know java String is immutable but do we know why java String is immutable? Main reason behind it is for better performance. 
	Creating a copy of existing java String is easier as there is no need to create a new instance but can be easily created by pointing to already existing String. 
	This saves valuable primary memory.



Object Oriented Programming principles:
=======================================
	1. Class
	2. Object
	3. Data Encapsulation
	4. Data Abstraction
	5. Inheritance
	6. Polymorphism
	7. Dynamic Binding
	8. Message Passing

class :
===============
    ****The process of binding data members and associated methods in a single unit is known as class.
	Or a class is a collection of data members and methods.
	
	Whenever we define a class, there is no memory space is created for the data members and methods, but whose memory 
	space is created when we create an object with respect to a class.

	Hence, all the classes in java have the logical existance and all the objects have physical existance.
	[Like : class=logical existance(like tree) & object=physical existance(like mango tree)].

	Data members=attributes/ fields/ properties/ states.
	Methods=accessories/ behaviour.

	In java, a 'class' is a keyword which is used to define 'user defined data type'.

	class default value is 'null'.for e.g. : Student student;//here student value is null now.

	class may be public, abstract, or final.

object : 
=================
    ****Instance of a class is known as an object, where instance is nothing but allocating sufficient amount of memory 
	space for the data members and methods of a class.
	
	Or grouped itm is known as an object, where a grouped item is a variable which allows us to hold multiple values
	either of same type or different type or both the types.

	 Characteristics of objects :
	------------------------------
	    State (what the objects have)
	    Behavior (what the objects do)
	    Identity (what makes them unique) 


Data Encapsulations : 
-------------------------
	Encapsulation is the technique of making the fields in a class private and providing access to the fields via public methods. 
		If a field is declared private, it cannot be accessed by anyone outside the class, thereby hiding the fields within the class,
		For this reason, encapsulation is also reffered to as 'data hiding'.

	Thus encapsulation gives the feature of maintainability, flexibility and extensibility to our code. 

	We can create fully encapsulated class by making the entire data member will be private and create getter, setter method to access that data member.

	POJO class is the best example of fully encapsulated class.

Data Abstraction :
-----------------------
	Abstraction is the process to hide certain details and only show the essential features of the object.
	In other words, it deals with the outside view of an object(interface).

	Abstraction is process of hiding the implementation details and showing only the functionality.
	Abstraction in java is achieved by using interface and abstract class. Interface gives 100% abstraction and abstract class give 0-100% abstraction.

	In simple word : We do abstraction when deciding what to implement.


Inheritance : 
----------------
	The process of getting or obtaining the data members and methods of one class into another class is known as inheritance.

	The class which is giving the data members & methods is known as 'Base/ Super/ Parent class'. 
	The class which is taking the data members & methods is known as 'Derived/ Sub/ Child class'.
		
	data members & methods==features.

	It is the process of 'reusability'.

	It's types :
	--------------
		1. Single inheritance
		2. Multilevel inheritance
		3. Hierarchical inheritance
		4. Multiple inheritance(supported by interface in java)
		5. Hybrid inheritance


Polymorphism :
-------------------
	"The process of representing one form in multiple forms" is known as polymorphism.
	In the defintion of polymorphism 'one form' always represents original form/ original method which is always present in the base class.
	And 'multiple forms' represents overridden methods, which are always residing in derived classes.

	In java polymorphism is implemented by using 'method overriding'.

	Method overriding : method heading is same + body is different.
	Method overloading : method parameter (either in 'no.' or 'type' or 'order') must be different. It is implemented in same class.
				Retun type of overloaded method will not be considered and a overloaded method may or may not be final.

Dynamic Binding :
-------------------
	The process of binding appropriate versions(overridden methods) of derrived classes which are inherited from base class, with base class object/ refference
		is known as dynamic binding.
	
	Here JVM considers two things :
		1. what type of object.
		2. what type of reference address object contains.

	Dynamic binding is always used for executing polymorphic based applications.

Relationships in Java : 
------------------------
	1. IS-A : In this relationship one class is obtaining the features of another class by using 'extends' keyword.
		  By this we get logical memory management.

		for e.g.: public class A extends B{}// IS-A

		The default relationship in java is 'IS-A'. 
		(because each & every class in java, there exist pre-defined implicite super class known as 'java.lang.Object'.)

	2. HAS-A : (also known as 'Part of'/ 'Kind of'/ 'Composition') In this relationship an object of one class can be created as data member in another class.		
		   By this we get physical memeory management.
		
		for e.g.:

			public class A{
				private B b;
				b=new B();// HAS-A
				---
				---

			}

		universal example of HAS-A is 'System.out' where 'out' is an object of 'PrintStream' class and it is created as static data member in 'System' class.
	

	3. USES-A : In this relationship method of one class is using an object of another class.
		
		for e.g.:
			public class A{
				void method(){
					B b=new B();// USES-A
				}
			} 

		object creation in main() is also the example of USES-A.


Constructor : 
----------------
	A constructor is a special member method which is automatically/ implicitly called by the JVM whenever an object is created
	for placing our own values without placing default value.

	The purpose of constructor is to initialize an object.
  
	It's name must be similar to the class name.
	Must not return any value even void.
	Must not be static (because constructor is called each and every time whenever an object is created and 
		static is meant for only one time execution.)
	Constructors do not inherite from one class to another class.

	Access specifier may or may not be 'private'(If  private than the object creation of the class is not possible through outside.)

	It has two types : 1. Default constructor, 2. Parameterized constructor.

'this' keyword :
-------------------
	'this' is one of the implicite variable/ object created by JVM & supplied to each & every java class for two purposes :
		1. It always points to the current class object.
		2. In order to differentiate between formal parameters and data members of the class.[this.<cuurent class data member>]

	'this' can not be called from static methods. 

'this()' and 'this(--)' :
--------------------------
	In order to establish the communication between current class constructors, we get two implicite functions.

'super', 'super()' and 'super(--)' :
-------------------------------------
	'super' is used to differentiate between base class features and derrived class features.
	
	'super()' or 'super(--)' is used to establish the communication between base class constructors and derrived class constructors. 
		It must be the first statement otherwise we get comile time error.


class loader subsystem :
------------------------
		When the 'java' command invokes the '.class':
		..............................................
			1) Class loader subsystem is one of the program developed by Sun Microsystem added as a part of JVM, and whose 
		role is to load/ transfer the .class file into the main memory from secondry memory.
			2) The loaded class taken by the JVM.
			3) JVM looks for main().
			4) JVM calls the main() with respect to the class name.


	length : 
	-------------------------
		'length' is one of the implicite variable which is used for-
			1) finding the size of the array,
			2) to treat each & every fundamental array(int[], flaot[], char[] etc..) as an object

		<array name>.length //returns the size of the array.


	Main Memory :
	---------------
		1. Heap Memory(reside objects)
		2. Stack Memory(resides methods)
		3. Associative Memory(resides value/ figurative constants).

	Types of data members in a class : 
	-----------------------------------
		1. instance/ non-static data members :
		.......................................
			# Memory space is created each & every time whenever an object is created.
			# It is always used for storing specific values.
			# Each & every instance data members must be accessed with respect to the object name.
			 
		2. static data members :
		........................................
			# Memory space is created only once at the time of loading the class.
			# It is always used for storing common values.
			# Declaration must be preceded by 'static' keyword.
			# must be accessed with respect to the class name.
			# It's values are sharable.

	Note : Each and every final variable value must be static but a static variable value may or may not be final.

	Types of methods in java :
	----------------------------------
		1. instance/ non-static methods :
		..................................
			# To perform repeated/ specific operations.
			# Must be accessed with the object name.
			# Result is not sharable among the member methods.
		2. static methods : 
		..................................
			# To perform one time/ common operations.
			# Method declaration must be preceeded by 'static' keyword. 
			# Must be accessed with respect to the class name.
			# Result is always sharable among the member methods.

	

** One static method can call another static method directly, provided both the static methods belong to the same class.

** One instance method can call another instance method directly, provided both the instance method belong to the same class.

** One static method can call another instance method with respect to an object without considering whether they belongs to the same class or different class.

** One instance method can call another static method with respect to the class name without considering whether they belongs to the same class or different class.

===================================
System.out.println()
System.out.print()
===================================
	println() & print() are the two predefined overloaded instance methods[overloaded becouse it takes different types of parameters] present in a predefined class 
	called 'PrintStream'. Since, println() & print are the instance methods, we must access those methods with respect to the object of 'PrintStream' class.
	An object of 'PrintStream' class is called 'out' created as a static data member in an another predefined class called 'System'.


Command Line Argument :
===========================

	$ java <class name> var1 var2 ..  ..

	What are all the command line argument we are passing to the java program, they are bydefault available in main method in the form of array of objects of 
	String class.

Enhanced model 'for loop' :
============================
	This model can be applied only for unit incrementation but not for decrementation.
	
	for(<array/collection data type> <any variable name> : <name of the array/collection variable which you want to loop>)
	{
		//block of statments;
	}	

	for e.g. :
		int a[]={10,20,30};
		for(int x:a){
			System.out.println(x);
		}

Wrapper class :
=======================
	For each and every fundamental data type, there exists a predefined class. such predefined class is known as wrapper class.
	The purpose of wrapper class is to convert numerical String type data into numerical/ fundamental type value.

	Fundamental data type		Wrapper class		conversion method from String type to fundamental data type
	---------------------		-------------		------------------------------------------------------------
	1) byte				Byte			public static byte parseByte(String);
	2) short			Short			public static short parseShort(String);
	3) int				Integer			public static int parseInt(String);
	4) long				Long			public static long parseLong(String);
	5) float			Float			public static float parseFloat(String);
	6) double			Double			public static double parseDouble(String);
	7) char				Character		-----------------------------------------
	8) boolean			Boolean			public boolean parseBoolean(String);

	in general : public static xxx parseXxx(String); // except char

	**an object cannot be cast to a primitive value.

prefix & postfix of ++ operator:
=================================
	The prefix form performs the increment operation and returns the value of the increment operation. 
	The postfix form returns the current value all of the expression and then performs the increment operation on that value.

casting :
===========
There are two types of casting, casting between primitive numeric types and casting between object references. 
Casting between numeric types is used to convert larger values, such as double values, to smaller values, such as byte values. 
Casting between object references is used to refer to an object by a compatible class, interface, or array type reference.

public, protected and private : 
================================
These are accessibility modifiers. Private is the most restrictive, while public is the least restrictive. 
There is no real difference between protected and the default type (also known as package protected) within the context of the same package,
however the protected keyword allows visibility to a derived class in a different package.

**  'Transient' is a variable that may not be serialized.

Method consideration in java :
==================================
	When we call any method in our java program, we need to consider always following important points:
	1) What type of method(either instance or static).
	2) What type of parameter it takes(if a method is not taking any parameter, then we never pass any value).
	3) What type of return type it returns and hold it into that variable of that type(if a method is not returning any value, then we never hold it in any variable).

**A native method is a method that is implemented in a language other than Java.

Package :
============
	Package is a collection of related classes and interfaces. package declaration should be first statement in a java class.
	java.lang package is a default package.

	A Java package is a naming context for classes and interfaces. A package is used to create a separate name space for groups of classes and interfaces. 
	Packages are also used to organize related classes and interfaces into a single API unit and to control accessibility to these classes and interfaces.

	# The protected access modifier cannot be applied to class and interfaces. Methods, fields can be declared protected, 
	however methods and fields in a interface cannot be declared protected.

final, finally and finalize:
=============================
	**final is a modifier which can be applied to a class or a method or a variable. final class can't be inherited, final method can't be overridden and final variable can't be changed.

	**finally is an exception handling code section which gets executed whether an exception is raised or not by the try block code segment.

	**finalize() is a method of Object class which will be executed by the JVM just before garbage collecting object to give a final chance for resource releasing activity.

Anonymous class :
===================
An anonymous class may implement an interface or extend a superclass, but may not be declared to do both.

Inner class and nested class :
=================================
	When a class is defined within a scope of another class, then it becomes inner class. 
	If the access modifier of the inner class is static, then it becomes nested class.

# We can not declare top level class as static, but only inner class can be declared static.
# A local inner class may be final or abstract.
public class Test
{ 
    static class InnerClass
    {
        public static void InnerMethod()
        { System.out.println("Static Inner Class!"); }
    } 
    public static void main(String args[])
    {
       Test.InnerClass.InnerMethod();
    }
}
//output: Static Inner Class!

**A non-static inner class may have object instances that are associated with instances of the class's outer class.
**A static inner class does not have any object instances.
**A (non-local) inner class may be declared as public, protected, private, static, final, or abstract.


Abstract class :
==================
A Class which doesn't provide complete implementation is defined as an abstract class. Abstract classes enforce abstraction.
Variables can't be declared as abstract. only classes and methods can be declared as abstract.

An abstract method is a method whose implementation is deferred to a subclass.

	*In Java you cannot create instance of abstract class , its compiler error.
	* 'abstract' is a keyword in java.
	*A class automatically becomes abstract class when any of its method declared as abstract.
	*abstract method doesn't have method body.
	*Variable cannot be made abstract, its only behavior or methods which would be abstract.
	*If a class extends an abstract class or interface it has to provide implementation to all its abstract method to be a concrete class. 
		Alternatively this class can also be abstract.



Marker Interface :
----------------------
	Marker interface in java is interface with no member variable or methods or in simple word empty interface called marker interface in Java,
	 also known as tagging interface. E.g.  Serializable, Clonnable.

	Marker interface used to indicate something to compiler or JVM. 
	So if JVM sees a Class is Serializable it done some special operation on it,
 	similar way if JVM sees one Class is implement Clonnable it performs some operation to support cloning.


Externalizable :
==================
Externalizable is an Interface that extends Serializable Interface. And sends data into Streams in Compressed Format.
It has two methods, writeExternal(ObjectOuput out) and readExternal(ObjectInput in)

Exception :
==================
		Run time errors are known as exception.
	
	Exception handling : 
	--------------------
		The process of converting system error messages into user friendly error messages is known as exception handling. 

	Difference between 'throw' and 'throws' :
	------------------------------------------	

		1. Throws clause is used to declare an exception and thow keyword is used to throw an exception explicitly.

		2. If we see syntax wise than throw is followed by an instance variable and throws is followed by exception class names.
	
    		3. The keyword throw is used inside method body to invoke an exception and throws clause is used in method declaration (signature).

